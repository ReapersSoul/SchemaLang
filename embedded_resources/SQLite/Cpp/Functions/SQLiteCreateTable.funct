{% if header %}
static bool SQLiteCreateTable(sqlite3* db);
static bool SQLiteCreateTable();
static std::string getSQLiteCreateTableStatement();
{% else %}
bool {{struct}}Schema::SQLiteCreateTable(sqlite3* db)
{
    char *zErrMsg = 0;
    int rc = sqlite3_exec(db, getSQLiteCreateTableStatement().c_str(), NULL, 0, &zErrMsg);
    if(rc != SQLITE_OK) {
        std::cout << "SQL error: " << zErrMsg << std::endl;
        sqlite3_free(zErrMsg);
        return false;
    }
    return true;
}

bool {{struct}}Schema::SQLiteCreateTable()
{
    if(db == nullptr) {
        std::cerr << "Database not set! Call SQLiteSetDatabase first." << std::endl;
        return false;
    }
    return SQLiteCreateTable(db);
}

std::string {{struct}}Schema::getSQLiteCreateTableStatement()
{
    return "CREATE TABLE IF NOT EXISTS {{struct}} ("
{% for mv in member_variables %}
           "{{mv.identifier}} {% if mv.type.is_integer() %}INTEGER{% elif mv.type.is_real() %}REAL{% elif mv.type.is_string() %}TEXT{% elif mv.type.is_bool() %}INTEGER{% else %}TEXT{% endif %}{% if mv.primary_key %} PRIMARY KEY{% endif %}{% if mv.auto_increment %} AUTOINCREMENT{% endif %}{% if mv.required %} NOT NULL{% endif %}{% if not loop.is_last %}, {% endif %}"
{% endfor %}
           ");";
}
{% endif %}
